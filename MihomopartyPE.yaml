# 混合端口 HTTP和SOCKS5用一个端口
mixed-port: 7897
# TCP 并发连接所有 IP, 将使用最快握手的 TCP
tcp-concurrent: true
# 允许局域网的连接（可用来共享代理）
allow-lan: true
# 开启 IPv6 总开关，关闭阻断所有 IPv6 链接和屏蔽 DNS 请求 AAAA 记录
ipv6: true
# 规则模式：rule/global/direct/script
mode: rule
# 设置日志输出级别: silent/error/warning/info/debug
log-level: info
# 全局 TLS 指纹
global-client-fingerprint: chrome
# 匹配所有进程（always/strict/off）
find-process-mode: strict
#外部控制器
external-controller: "127.0.0.1:9090"
external-ui: "ui"
external-ui-url: "https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"
# 使用geoip.dat数据库
geodata-mode: true
geox-url:
  geoip: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat"
  geosite: "https://mirror.ghproxy.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://geodata.kelee.one/Country-Masaiki.mmdb"
  asn: "https://geodata.kelee.one/GeoLite2-ASN-P3TERX.mmdb"
                         
profile:
  # 存储 select 选择记录
  store-selected: true 
  # 持久化 fake-ip
  store-fake-ip: true  

# 嗅探域名 可选配置
sniffer:               
  enable: true
  # 是否使用嗅探结果作为实际访问，默认 true
  # 解析纯洁ip
  parse-pure-ip: true 
  # 强制映射dns
  # force-dns-mapping: true
  # 覆盖目标
  # override-destination: true
  sniff:
    TLS:
      ports: [443, 8443]
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    QUIC:
      ports: [443, 8443]

# Tun 配置  
tun:
  enable: true
  # 可选： system/gvisor/mixed；
  stack: mixed
  # dns劫持,一般设置为 any:53 即可, 即劫持所有53端口的udp流量
  dns-hijack: [any:53]
  # 自动设置全局路由，可以自动将全局流量路由进入tun网卡。
  auto-route: true
  # 自动识别出口网卡
  auto-detect-interface: true
        
dns:
  enable: true
  # IPV6解析开关；如果为false，将返回ipv6结果为空
  ipv6: true
  # 模式：redir-host或fake-ip
  enhanced-mode: fake-ip
  # DNS监听地址
  listen: 0.0.0.0:1053
  # Fake-IP解析地址池
  fake-ip-range: 198.18.0.1/16
  # fakeip 过滤，以下地址不会下发 fakeip 映射用于连接
  fake-ip-filter: ['*.lan','*.direct', cable.auth.com, '*.msftconnecttest.com', '*.msftncsi.com', network-test.debian.org, detectportal.firefox.com, resolver1.opendns.com, '*.srv.nintendo.net', '*.stun.playstation.net', xbox.*.microsoft.com, '*.xboxlive.com', stun.*, global.turn.twilio.com, global.stun.twilio.com, app.yinxiang.com, injections.adguard.org, local.adguard.org, cable.auth.com, localhost.*.qq.com, localhost.*.weixin.qq.com, '*.logon.battlenet.com.cn', '*.logon.battle.net', '*.blzstatic.cn', music.163.com, '*.music.163.com', '*.126.net', musicapi.taihe.com, music.taihe.com, songsearch.kugou.com, trackercdn.kugou.com, '*.kuwo.cn', api-jooxtt.sanook.com, api.joox.com, joox.com, y.qq.com, '*.y.qq.com', streamoc.music.tc.qq.com, mobileoc.music.tc.qq.com, isure.stream.qqmusic.qq.com, dl.stream.qqmusic.qq.com, aqqmusic.tc.qq.com, amobile.music.tc.qq.com, '*.xiami.com', '*.music.migu.cn', music.migu.cn, proxy.golang.org, '*.mcdn.bilivideo.cn', '*.cmpassport.com', id6.me, open.e.189.cn, mdn.open.wo.cn, opencloud.wostore.cn, auth.wosms.cn, '*.jegotrip.com.cn', '*.icitymobile.mobi', '*.pingan.com.cn', '*.cmbchina.com', '*.10099.com.cn', pool.ntp.org, '*.pool.ntp.org', ntp.*.com, time.*.com, 'ntp?.*.com', 'time?.*.com', time.*.gov, time.*.edu.cn, '*.ntp.org.cn', PDC._msDCS.*.*, DC._msDCS.*.*, GC._msDCS.*.*]
  #默认的域名解析服务器
  nameserver: [quic://223.5.5.5, quic://223.6.6.6, https://1.12.12.12/dns-query, https://120.53.53.53/dns-query, https://doh.pub/dns-query, https://dns.alidns.com/dns-query]                     
    
# 策略组引用相关参数
pg: &pg {type: select, proxies: [手动切换, 香港节点, 美国节点, 新坡节点, 日本节点, 台湾节点, DIRECT]}
# 订阅更新和延迟测试相关参数
p: &p {type: http, interval: 86400, health-check: {enable: true, url: http://latency-test.skk.moe/endpoint, interval: 1800}}
# 自动选择策略组：选取延迟最低节点
auto: &auto {type: url-test, lazy: true, url: http://latency-test.skk.moe/endpoint, interval: 300, tolerance: 50, include-all-providers: true}
# 手动选择策略组：手动选择想要的节点/策略组
select: &select {type: select, include-all-providers: true}
# 故障回退策略组：策略组将按顺序选择你列表中第一个可用的节点
fallback: &fallback {type: fallback, lazy: true, url: http://latency-test.skk.moe/endpoint, interval: 300, include-all-providers: true}
# 负载均衡策略组：不同的请求将使用不同的代理节点
load-balance: &load-balance {type: load-balance, lazy: true, strategy: consistent-hashing, url: http://latency-test.skk.moe/endpoint, interval: 300, include-all-providers: true}
# classical规则相关
c: &c {type: http, behavior: classical, interval: 86400}
# domain规则相关
d: &d {type: http, behavior: domain, interval: 86400}
# ipcidr规则相关
i: &i {type: http, behavior: ipcidr, interval: 86400}

proxy-providers:
  Subscribe: {<<: *p, path: ./proxy-providers/Sub.yaml, url:}
    # Sub-Store生成的链接或机场订阅,可以直接放到URL:后面

proxy-groups:

  #分流分组

  - {name: 手动切换, type: select, proxies: [香港节点, 美国节点, 新坡节点, 日本节点, 台湾节点, DIRECT], icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Proxy.png}

  - {name: Telegram, <<: *pg, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Telegram.png}

  - {name: Twitter, <<: *pg, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Twitter.png}

  - {name: Instagram, <<: *pg, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Instagram.png}

  - {name: Facebook, <<: *pg, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Facebook.png}

  - {name: Discord, <<: *pg, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Discord.png}

  - {name: YouTube, <<: *pg, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/YouTube.png}
  
  - {name: Google, <<: *pg, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Google_Search.png}

  - {name: Pixiv, <<: *pg, icon: https://raw.githubusercontent.com/LGMjiang/Tool/main/Clash/Icon/Pixiv.png}

  - {name: Reddit, <<: *pg, icon: https://raw.githubusercontent.com/LGMjiang/Tool/main/Clash/Icon/Reddit.png}

  - {name: Microsoft, <<: *pg, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Microsoft.png}

  - {name: Apple, <<: *pg, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Apple_1.png}

  - {name: Global, <<: *pg, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Global.png}

  - {name: Game, <<: *pg, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Game.png}

  - {name: StreamMedia, <<: *pg, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Streaming.png}

  - {name: 兜底分流, <<: *pg, icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color//Final.png}

  - {name: 香港节点, <<: *auto, filter: '^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)\b)))(?!.*((?i)劫持|家宽|Lite|lite|LITE|Home|home|HOME|IEPL|iepl|Emby|EBMY|((0\.\d)|(\d\.0)))).*$', icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Hong_Kong.png}

  - {name: 美国节点, <<: *auto, filter: '^(?=.*((?i)🇺🇸|美国|(\b(US|USA|United States)\b)))(?!.*((?i)劫持|家宽|Lite|lite|LITE|Home|home|HOME|IEPL|iepl|Emby|EBMY|((0\.\d)|(\d\.0)))).*$', icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/United_States.png}

  - {name: 新坡节点, <<: *auto, filter: '^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)\b)))(?!.*((?i)劫持|家宽|Lite|lite|LITE|Home|home|HOME|IEPL|iepl|Emby|EBMY|((0\.\d)|(\d\.0)))).*$', icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Singapore.png}

  - {name: 日本节点, <<: *auto, filter: '^(?=.*((?i)🇯🇵|日本|(\b(JP|Japan)\b)))(?!.*((?i)劫持|家宽|Lite|lite|LITE|Home|home|HOME|IEPL|iepl|Emby|EBMY|((0\.\d)|(\d\.0)))).*$', icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Japan.png}

  - {name: 台湾节点, <<: *auto, filter: '^(?=.*((?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)\b)))(?!.*((?i)劫持|家宽|Lite|lite|LITE|Home|home|HOME|IEPL|iepl|Emby|EBMY|((0\.\d)|(\d\.0)))).*$', icon: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/China.png}

rule-providers:
  # 去广告
  AD: {<<: *c, path: ./rules/AD.list, url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Reject.list}

  # Lan
  Lan: {<<: *c, format: text, path: ./rule-providers/Lan.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Lan.list}

  # Apple Service
  Apple: {<<: *c, format: text, path: ./rule-providers/Apple.list,  url: https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Apple/Apple.list}

  # Microsoft Service
  Microsoft: {<<: *c, format: text, path: ./rule-providers/Microsoft.list,  url: https://raw.githubusercontent.com/GGsimita/clash-mihomo-js/refs/heads/main/Script-pub/edgepub.yaml}

  # Google Service
  YouTube: {<<: *c, format: text, path: ./rule-providers/YouTube.list,  url: https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/YouTube/YouTube.list}
  Google: {<<: *c, format: text, path: ./rule-providers/Google.list,  url: https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Google/Google.list}

  # Telegram
  Telegram: {<<: *c, format: text, path: ./rule-providers/Telegram.list,  url: https://raw.githubusercontent.com/GGsimita/clash-mihomo-js/refs/heads/main/Script-pub/telegram.yaml}

  # Twitter
  Twitter: {<<: *c, format: text, path: ./rule-providers/Twitter.list,  url: https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Twitter/Twitter.list}

  # Instagram
  Instagram: {<<: *c, format: text, path: ./rule-providers/Instagram.list,  url: https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Instagram/Instagram.list}

  # Discord
  Discord: {<<: *c, format: text, path: ./rule-providers/Discord.list,  url: https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Discord/Discord.list}

  # Facebook
  Facebook: {<<: *c, format: text, path: ./rule-providers/Facebook.list,  url: https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Facebook/Facebook.list}

  # Reddit
  Reddit: {<<: *c, format: text, path: ./rule-providers/Reddit.list,  url: https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Reddit/Reddit.list}

  # Pixiv
  Pixiv: {<<: *c, format: text, path: ./rule-providers/Pixiv.list,  url: https://raw.githubusercontent.com/GGsimita/clash-mihomo-js/refs/heads/main/Script-pub/Pixivpub.list}

  # Game
  Steam: {<<: *c, format: text, path: ./rule-providers/Steam.list,  url: https://raw.githubusercontent.com/GGsimita/clash-mihomo-js/refs/heads/main/Script-pub/gamepub.yaml}
  gameDL: {<<: *c, format: text, path: ./rulesets/loyalsoldier/gamedl.list,  url: https://github.com/ACL4SSR/ACL4SSR/raw/master/Clash/Ruleset/GameDownload.list}

  # CNDomain
  ChinaDomain: {<<: *c, format: text, path: ./rule-providers/ChinaDomain.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/ChinaDomain.list}

  # Streaming
  StreamMedia: {<<: *c, format: text, path: ./rule-providers/StreamMedia.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/ProxyMedia.list}

  # Global
  Global: {<<: *c, format: text, path: ./rule-providers/Global.list,  url: https://github.com/blackmatrix7/ios_rule_script/raw/master/rule/Clash/Global/Global.list}
 
rules:
  #- SCRIPT,quic,REJECT
  # 规则集
  - RULE-SET,AD,REJECT
  - RULE-SET,Microsoft,Microsoft
  - RULE-SET,YouTube,YouTube
  - RULE-SET,Google,Google
  - RULE-SET,Telegram,Telegram,no-resolve
  - RULE-SET,Twitter,Twitter
  - RULE-SET,Facebook,Facebook
  - RULE-SET,Discord,Discord
  - RULE-SET,Pixiv,Pixiv
  - RULE-SET,Reddit,Reddit
  - RULE-SET,Steam,Game
  - RULE-SET,gameDL,Game
  - RULE-SET,Apple,Apple
  - RULE-SET,StreamMedia,StreamMedia
  - RULE-SET,Global,Global
  - RULE-SET,ChinaDomain,DIRECT,no-resolve
  - RULE-SET,Lan,DIRECT,no-resolve
  # 自定义规则
  - DOMAIN-SUFFIX,aca.best,Proxy
  - DOMAIN-SUFFIX,acaisbest.com,Proxy
  - DOMAIN-SUFFIX,122777.xyz,Proxy
  - DOMAIN-SUFFIX,12345.al,Proxy
    # Google服务
  - DOMAIN-SUFFIX,googleapis.cn,Proxy
    # Google静态资源
  - DOMAIN-SUFFIX,gstatic.com,Proxy
    # Google Play下载服务
  - DOMAIN-SUFFIX,xn--ngstr-lra8j.com,Proxy
    # Github Pages
  - DOMAIN-SUFFIX,github.io,Proxy
    # V2rayse节点工具
  - DOMAIN,v2rayse.com,Proxy
  - DOMAIN-SUFFIX,op.gg,DIRECT
  - DOMAIN,opgg-static.akamaized.net,DIRECT
  - DOMAIN-SUFFIX,250941.xyz,DIRECT
  - GEOIP,CN,DIRECT,no-resolve
  - GEOIP,LAN,DIRECT,no-resolve
  - MATCH,兜底分流

script:
  shortcuts:
    quic: network == 'udp' and dst_port == 443
